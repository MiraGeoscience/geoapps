name: Create env file

on:
  pull_request:
    types: [labeled]
  push:
    tags:
      - "v[0-9]+.**"
      - "analyst-v[0-9]+.**"

jobs:
  create-env-file:
    if: ${{ github.event.action != 'labeled' || contains(fromJSON('["pack:env"]'), github.event.label.name) }}
    defaults:
      run:
        shell: bash -l {0}
    runs-on: windows-latest
    env:
      releaseFullEnv: false
      python_ver: '3.9'
      PYTHONUTF8: 1
      ARTIFACT_NAME: geoapps.conda-env
      CONDA_ENV_FILE_GLOB_PATTERN: conda-py-*-geoapps*.lock.yml
    outputs:
      releaseFullEnv: ${{ env.releaseFullEnv }}
      full_env_file: ${{ steps.create-env-file.outputs.full_env_file }}
      artifact: ${{ env.ARTIFACT_NAME }}.${{ steps.git-info.outputs.git_ref_suffix }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: git info
        id: git-info
        run: |
          REF_NAME=$(echo $GITHUB_REF_NAME | sed s=/=_=g)
          SHORT_SHA=${GITHUB_SHA:0:8}
          echo "git_ref_suffix=${REF_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: Activate conda base env
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: environments\env-python-${{ env.python_ver }}.yml
          environment-name: conda-lock
          cache-downloads: true
          cache-env: true
          extra-specs: conda-lock
          channels: conda-forge
      - name: Create env file
        id: create-env-file
        run: |
          [ $GITHUB_REF_TYPE == tag ] && REF_TYPE=tag || REF_TYPE=sha
          [ $REF_TYPE == tag ] && REF=${GITHUB_REF_NAME} || REF=${GITHUB_SHA}
          python devtools/create_application_env_files.py $REF_TYPE $REF --url $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
          echo "full_env_file=conda-py-${{ env.python_ver }}-win-64-geoapps.lock.yml" >> $GITHUB_OUTPUT
          echo "simpeg_env_file=conda-py-${{ env.python_ver }}-win-64-geoapps-simpeg.lock.yml" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}.${{ steps.git-info.outputs.git_ref_suffix }}
          path: ${{ env.CONDA_ENV_FILE_GLOB_PATTERN }}
          retention-days: 2
          if-no-files-found: error

  draft-release:
    if: ${{ startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Create draft release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          tag_name=${GITHUB_REF#refs/tags/}

          gh release view $tag_name 2> /dev/null
          || new_release_url=$(gh release create --draft
          $( echo $tag_name | grep -i -q '^v[0-9]\+\(\.[0-9]\+\)\+-[a-z]' && echo --prerelease )
          -t $tag_name
          $tag_name)

          [[ $new_release_url ]] && echo "release_id=${new_release_url##https*/}" >> $GITHUB_OUTPUT
          || echo "release_id=$tag_name" >> $GITHUB_OUTPUT

  release-env:
    needs: [create-env-file, draft-release]
    if: ${{ needs.create-env-file.outputs.releaseFullEnv }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.create-env-file.outputs.artifact }}
      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh --version
          gh release upload ${{ needs.draft-release.outputs.release_id }} "${{ needs.create-env-file.outputs.full_env_file }}#Conda env file (.yml)"
