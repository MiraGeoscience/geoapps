name: Build bundle

on:
  pull_request:
    types: [labeled]
  push:
    tags:
      - "v[0-9]+.**"

jobs:
  build-bundle:
    if: ${{ github.event.action != 'labeled' || contains(fromJSON('["pack:full", "pack:simpeg"]'), github.event.label.name) }}
    defaults:
      run:
        shell: bash -l {0}
    runs-on: windows-latest
    env:
      releaseFullBundle: false
      PYTHONUTF8: 1
      ARTIFACT_NAME: geoapps.conda-pack
      CONDA_ENV_NAME_GLOB_PATTERN: geoapps*
      SIMPEG_CONDA_ENV_NAME: geoapps-simpeg
      FULL_CONDA_ENV_NAME: geoapps
      SIMPEG_CONDA_LOCK_ENV_FILE: environments/conda-py-3.9-win-64-simpeg.lock.yml
      FULL_CONDA_LOCK_ENV_FILE: environments/conda-py-3.9-win-64.lock.yml
    outputs:
      releaseFullBundle: ${{ env.releaseFullBundle }}
      full_bundle: ${{ steps.conda-pack-full.outputs.filename }}
      artifact: ${{ env.ARTIFACT_NAME }}.${{ steps.git-info.outputs.git_ref_suffix }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: git info
        id: git-info
        run: |
          REF_NAME=${GITHUB_REF##refs/*/}
          SHORT_SHA=${GITHUB_SHA:0:8}
          echo ::set-output name=git_ref_suffix::${REF_NAME}-${SHORT_SHA}
      - name: Create the full Conda environment
        if: ${{ github.event.action != 'labeled' || github.event.label.name == 'pack:full' }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ${{ env.FULL_CONDA_LOCK_ENV_FILE }}
          environment-name: ${{ env.FULL_CONDA_ENV_NAME }}
          cache-downloads: true
      - name: Install in full Conda env from sources
        if: ${{ github.event.action != 'labeled' || github.event.label.name == 'pack:full' }}
        run: python -m pip install . -vv --no-deps
      - name: Create the SimPEG Conda environment
        if: ${{ github.event.action != 'labeled' || github.event.label.name == 'pack:simpeg' }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ${{ env.SIMPEG_CONDA_LOCK_ENV_FILE }}
          environment-name: ${{ env.SIMPEG_CONDA_ENV_NAME }}
          cache-downloads: true
      - name: Install in SimPEG Conda env from sources
        if: ${{ github.event.action != 'labeled' || github.event.label.name == 'pack:simpeg' }}
        run: python -m pip install . -vv --no-deps
      - name: Activate conda base env
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: env-python-3.9.yml
          environment-name: conda-pack
          cache-downloads: true
          cache-env: true
          extra-specs: conda-pack
          channels: conda-forge
      - name: Run conda pack for SimPEG
        id: conda-pack-simpeg
        if: ${{ github.event.action != 'labeled' || github.event.label.name == 'pack:simpeg' }}
        run: |
          ENV_PATH=$MAMBA_ROOT_PREFIX/envs/$SIMPEG_CONDA_ENV_NAME
          OUTPUT_FILE=$SIMPEG_CONDA_ENV_NAME-${{ steps.git-info.outputs.git_ref_suffix }}.zip
          conda-pack --prefix $ENV_PATH --output $OUTPUT_FILE
      - name: Run conda pack full
        id: conda-pack-full
        if: ${{ (env.releaseFullBundle && github.event.action != 'labeled') || github.event.label.name == 'pack:full' }}
        run: |
          ENV_PATH=$MAMBA_ROOT_PREFIX/envs/$FULL_CONDA_ENV_NAME
          OUTPUT_FILE=$FULL_CONDA_ENV_NAME-${{ steps.git-info.outputs.git_ref_suffix }}.zip
          conda-pack --prefix $ENV_PATH --output $OUTPUT_FILE
          echo ::set-output name=filename::${OUTPUT_FILE}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}.${{ steps.git-info.outputs.git_ref_suffix }}
          path: ${{ env.CONDA_ENV_NAME_GLOB_PATTERN }}-${{ steps.git-info.outputs.git_ref_suffix }}.zip
          retention-days: 2
          if-no-files-found: error

  draft-release:
    if: ${{ startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v2
      - name: Create draft release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          tag_name=${GITHUB_REF#refs/tags/}

          gh release view $tag_name 2> /dev/null
          || new_release_url=$(gh release create --draft
          $( echo $tag_name | grep -i -q '^v[0-9]\+\(\.[0-9]\+\)\+-[a-z]' && echo --prerelease )
          -t $tag_name
          $tag_name)

          [[ $new_release_url ]] && echo "::set-output name=release_id::${new_release_url##https*/}"
          || echo "::set-output name=release_id::$tag_name"

  release-bundle:
    needs: [build-bundle, draft-release]
    if: ${{ needs.build-bundle.outputs.releaseFullBundle }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-bundle.outputs.artifact }}
      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh --version
          gh release upload ${{ needs.draft-release.outputs.release_id }} "${{ needs.build-bundle.outputs.full_bundle }}#Conda Pack (.zip)"
